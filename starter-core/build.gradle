import io.micronaut.starter.rocker.RockerReflectionConfigTask
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "com.adarshr.test-logger" version "2.0.0"
    id "com.fizzed.rocker" version "1.2.3"
}

ext {
    picocliVersion = '4.2.0'
}

sourceSets {
    main {
        rocker {
            srcDir("src/main/java")
        }
    }
}


dependencies {
    compileOnly "org.graalvm.nativeimage:svm"
    compileOnly "info.picocli:picocli:${picocliVersion}"
    compileOnly "info.picocli:picocli-shell-jline3:${picocliVersion}"
    compileOnly "org.fusesource.jansi:jansi:1.15"
    api "com.fizzed:rocker-runtime:1.2.3"
    implementation "org.yaml:snakeyaml:1.26"
    implementation 'org.apache.commons:commons-compress:1.20'

    testImplementation "info.picocli:picocli:${picocliVersion}"
    testImplementation "info.picocli:picocli-shell-jline3:${picocliVersion}"
    testImplementation "org.fusesource.jansi:jansi:1.15"
}

task("buildRockerReflectionConfig", type: RockerReflectionConfigTask)
        .mustRunAfter(compileJava)
classes.dependsOn(buildRockerReflectionConfig)


rocker {
    // (All settings are shown with their defaults)
    //
    // Skips building templates all together
    skip false
    // Base directory for generated java sources, actual target is sub directory
    // with the name of the source set. The value is passed through project.file().
    outputBaseDirectory = "$buildDir/generated-src/rocker"
    // Base directory for the directory where the hot reload feature
    // will (re)compile classes to at runtime (and where `rocker-compiler.conf`
    // is generated, which is used by RockerRuntime.getInstance().setReloading(true)).
    // The actual target is a sub directory with the name of the source set.
    // The value is passed through project.file().
    classBaseDirectory = "$buildDir/classes"
    failOnError true
    skipTouch true
    // must not be empty when skipTouch is equal to false
    touchFile ""
    javaVersion '1.8'
    extendsClass null
    extendsModelClass null
    optimize null
    discardLogicWhitespace = true
    targetCharset null
    suffixRegex null
    postProcessing = ['io.micronaut.starter.rocker.WhitespaceProcessor']
    markAsGenerated null
}

testlogger {
    theme 'standard-parallel'
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
}