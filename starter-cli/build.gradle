plugins {
    id "application"
    id "io.micronaut.starter.rocker"
    id 'org.asciidoctor.convert' version '1.6.1' apply false
}

ext {
    picocliVersion = '4.2.0'
}

configurations {
    generateConfig
}

dependencies {
    api project(":starter-core")
    api "info.picocli:picocli:${picocliVersion}"
    api "info.picocli:picocli-shell-jline3:${picocliVersion}"
    api "com.fizzed:rocker-runtime:1.2.3"

    runtime "org.slf4j:slf4j-nop:1.7.30"

    compileOnly "org.graalvm.nativeimage:svm"

    implementation "org.fusesource.jansi:jansi:1.15"
    implementation "org.yaml:snakeyaml:1.26"

    generateConfig "info.picocli:picocli-codegen:${picocliVersion}"
}

mainClassName = "io.micronaut.starter.cli.MicronautStarter"

jar {
    manifest {
        attributes('Automatic-Module-Name': "${project.group}.${project.name}".replaceAll('[^\\w\\.\\$_]', "_"))
        attributes('Implementation-Version': projectVersion)
        attributes('Implementation-Title': title)
        attributes "Main-Class": "io.micronaut.starter.cli.MicronautStarter", "Implementation-Version": project.version
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

sourceSets {
    main {
        rocker {
            srcDir("src/main/java")
        }
    }
}

rocker {
    // (All settings are shown with their defaults)
    //
    // Skips building templates all together
    skip false
    // Base directory for generated java sources, actual target is sub directory
    // with the name of the source set. The value is passed through project.file().
    outputBaseDirectory = "$buildDir/generated-src/rocker"
    // Base directory for the directory where the hot reload feature
    // will (re)compile classes to at runtime (and where `rocker-compiler.conf`
    // is generated, which is used by RockerRuntime.getInstance().setReloading(true)).
    // The actual target is a sub directory with the name of the source set.
    // The value is passed through project.file().
    classBaseDirectory = "$buildDir/classes"
    failOnError true
    skipTouch true
    // must not be empty when skipTouch is equal to false
    touchFile ""
    javaVersion '1.8'
    extendsClass null
    extendsModelClass null
    optimize null
    discardLogicWhitespace = true
    targetCharset null
    suffixRegex null
    postProcessing = ['io.micronaut.starter.rocker.WhitespaceProcessor']
    markAsGenerated null
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.compile, configurations.generateConfig, sourceSets.main.runtimeClasspath)
    main 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args mainClassName, "--outdir=${project.buildDir}/generated-picocli-docs", "-v", "--factory=io.micronaut.starter.cli.MicronautFactory" //, "--template-dir=src/docs/mantemplates"
}

task copyAdocs(type: Copy) {
    from file("${projectDir}/src/docs/asciidoc")
    include "**/*.adoc"
    into file("${project.buildDir}/generated-picocli-docs")
}

apply plugin: 'org.asciidoctor.convert'
asciidoctor {
    dependsOn(generateManpageAsciiDoc, copyAdocs)
    sourceDir = file("${project.buildDir}/generated-picocli-docs")
    outputDir = file("${project.buildDir}/docs")
    logDocuments = true
    backends 'manpage', 'html5'
}